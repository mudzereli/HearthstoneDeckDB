function toTitleCase(str){return str.replace(/\w\S*/g,function(txt){return txt.charAt(0).toUpperCase()+txt.substr(1).toLowerCase()})}document.createElement("header"),document.createElement("footer"),document.createElement("section"),document.createElement("article"),document.createElement("aside"),document.createElement("nav"),!function(){"use strict";var a,b,c="ngclipboard";"object"==typeof module&&module.exports?(a=require("angular"),b=require("clipboard"),module.exports=c):(a=window.angular,b=window.Clipboard),a.module(c,[]).directive("ngclipboard",function(){return{restrict:"A",scope:{ngclipboardSuccess:"&",ngclipboardError:"&"},link:function(a,c){var d=new b(c[0]);d.on("success",function(b){a.$apply(function(){a.ngclipboardSuccess({e:b})})}),d.on("error",function(b){a.$apply(function(){a.ngclipboardError({e:b})})})}}})}(),angular.module("AngularApp",["ngRoute","ui.bootstrap","door3.css","LocalStorageModule","googlechart","isteven-multi-select","ngclipboard"]).filter("titleCase",function(){return function(input){return input=input||"",input.replace(/\w\S*/g,function(txt){return txt.charAt(0).toUpperCase()+txt.substr(1).toLowerCase()})}}).config(function($routeProvider){$routeProvider.when("/",{templateUrl:"views/main.html"}).when("/decks",{templateUrl:"views/decks.html"}).when("/helper",{templateUrl:"views/helper.html"}).otherwise({redirectTo:"/"})}).controller("NavbarController",["$scope","$location",function($scope,$location){$scope.IsCollapsed=!0,$scope.Toggle=function(){this.IsCollapsed=!this.IsCollapsed},$scope.IsActive=function(path){return path===$location.path()}}]).controller("ThemeController",["$scope","$css","localStorageService",function($scope,$css,localStorageService){$scope.Themes={cerulean:{Name:"Cerulean",ID:"cerulean"},cosmo:{Name:"Cosmo",ID:"cosmo"},cyborg:{Name:"Cyborg",ID:"cyborg"},darkly:{Name:"Darkly",ID:"darkly"},flatly:{Name:"Flatly",ID:"flatly"},journal:{Name:"Journal",ID:"journal"},lumen:{Name:"Lumen",ID:"lumen"},paper:{Name:"Paper",ID:"paper"},readable:{Name:"Readable",ID:"readable"},sandstone:{Name:"Sandstone",ID:"sandstone"},simplex:{Name:"Simplex",ID:"simplex"},slate:{Name:"Slate",ID:"slate"},spacelab:{Name:"Spacelab",ID:"spacelab"},superhero:{Name:"Superhero",ID:"superhero"},united:{Name:"United",ID:"united"},yeti:{Name:"Yeti",ID:"yeti"},bootstrap:{Name:"Bootstrap",ID:"bootstrap"}},$scope.ChangeTheme=function(theme){"bootstrap"!==$scope.CurrentTheme.ID?$css.remove("//maxcdn.bootstrapcdn.com/bootswatch/3.3.4/"+$scope.CurrentTheme.ID+"/bootstrap.min.css"):$css.remove("bootstrap-3.3.4-dist/css/bootstrap.min.css"),$scope.CurrentTheme=$scope.Themes[theme],"bootstrap"!==$scope.CurrentTheme.ID?$css.add("//maxcdn.bootstrapcdn.com/bootswatch/3.3.4/"+$scope.CurrentTheme.ID+"/bootstrap.min.css"):$css.add("bootstrap-3.3.4-dist/css/bootstrap.min.css"),localStorageService.set("theme",$scope.CurrentTheme.ID)};var theme=localStorageService.get("theme");(null===theme||"undefined"==theme)&&(theme="bootstrap"),$scope.CurrentTheme=$scope.Themes[theme],$scope.ChangeTheme($scope.CurrentTheme.ID)}]).controller("AppController",["$scope",function($scope){$scope.BaseURL="",$scope.BaseURL="/HearthstoneDeckDB",$scope.Application={Name:"Hearthstone Deck DB",CurrentlySelectedDeckIndex:0,DeckListShowing:[]},$scope.Filters={Showing:!0,StartDate:new Date(2017,1,28),EndDate:new Date,Classes:[],Archetypes:[],Events:[],Players:[],IncludeDecksWithCards:[],ExcludeDecksWithCards:[]},$scope.Classes=[{name:"Mage",icon:"<img src='"+$scope.BaseURL+"/assets/Icon_Mage_64.png'>",count:0,countword:"(0 decks)",color:"#69CCF0",selected:!1},{name:"Priest",icon:"<img src='"+$scope.BaseURL+"/assets/Icon_Priest_64.png'>",count:0,countword:"(0 decks)",color:"#F0F0F0",selected:!1},{name:"Warlock",icon:"<img src='"+$scope.BaseURL+"/assets/Icon_Warlock_64.png'>",count:0,countword:"(0 decks)",color:"#9482C9",selected:!1},{name:"Shaman",icon:"<img src='"+$scope.BaseURL+"/assets/Icon_Shaman_64.png'>",count:0,countword:"(0 decks)",color:"#0070DE",selected:!1},{name:"Warrior",icon:"<img src='"+$scope.BaseURL+"/assets/Icon_Warrior_64.png'>",count:0,countword:"(0 decks)",color:"#C79C6E",selected:!1},{name:"Druid",icon:"<img src='"+$scope.BaseURL+"/assets/Icon_Druid_64.png'>",count:0,countword:"(0 decks)",color:"#FF7D0A",selected:!1},{name:"Rogue",icon:"<img src='"+$scope.BaseURL+"/assets/Icon_Rogue_64.png'>",count:0,countword:"(0 decks)",color:"#FFF569",selected:!1},{name:"Hunter",icon:"<img src='"+$scope.BaseURL+"/assets/Icon_Hunter_64.png'>",count:0,countword:"(0 decks)",color:"#ABD473",selected:!1},{name:"Paladin",icon:"<img src='"+$scope.BaseURL+"/assets/Icon_Paladin_64.png'>",count:0,countword:"(0 decks)",color:"#F58CBA",selected:!1}],$scope.Archetypes=[],$scope.Events=[],$scope.Players=[],$scope.Cards=[],$scope.DeckHelperData={},$scope.StartDatePicker={},$scope.EndDatePicker={},$scope.DeckHelperCards=[],$scope.DECKDB=JSON_DECK_DB,$scope.FILTERDECKDB=[],$scope.Tier1Cards=[],$scope.Tier2Cards=[],$scope.Tier3Cards=[],$scope.Tier4Cards=[],$scope.CopyClipboardCards=[],$scope.SetupCharts=function(){$scope.ChartByClass={},$scope.ChartByClass.type="PieChart",$scope.ChartByClass.data={cols:[{id:"c",label:"Class",type:"string"},{id:"s",label:"Seen",type:"number"}]},$scope.ChartByClass.options={title:"Filtered Decks by Class",chartArea:{left:0,top:15,width:"90%",height:"75%"}},$scope.ChartByArchetype={},$scope.ChartByArchetype.type="PieChart",$scope.ChartByArchetype.data={cols:[{id:"c",label:"Archetype",type:"string"},{id:"s",label:"Seen",type:"number"}]},$scope.ChartByArchetype.options={title:"Filtered Decks by Archetype",chartArea:{left:0,top:15,width:"90%",height:"75%"}},$scope.ChartByEvent={},$scope.ChartByEvent.type="PieChart",$scope.ChartByEvent.data={cols:[{id:"c",label:"Event",type:"string"},{id:"s",label:"Seen",type:"number"}]},$scope.ChartByEvent.options={title:"Filtered Decks by Event",chartArea:{left:0,top:15,width:"90%",height:"75%"}}},$scope.PopulateAllData=function(wipeAll){var _deckDB,card,archetype,evt,player,clss;if(wipeAll)$scope.Cards=[],$scope.Archetypes=[],$scope.Events=[],$scope.Players=[],_deckDB=$scope.DECKDB;else{for(var i=0;i<$scope.Cards.length;i++)card=$scope.Cards[i],card.count=0,card.countword="("+card.count+" decks)";for(var ii=0;ii<$scope.Archetypes.length;ii++)archetype=$scope.Archetypes[ii],archetype.count=0,archetype.countword="("+archetype.count+" decks)";for(var iii=0;iii<$scope.Events.length;iii++)evt=$scope.Events[iii],evt.count=0,evt.countword="("+evt.count+" decks)";for(var iiii=0;iiii<$scope.Players.length;iiii++)player=$scope.Players[iiii],player.count=0,player.countword="("+player.count+" decks)";for(var iiiii=0;iiiii<$scope.Classes.length;iiiii++)clss=$scope.Classes[iiiii],clss.count=0,clss.countword="("+clss.count+" decks)";_deckDB=$scope.FILTERDECKDB}for(var j=0;j<_deckDB.length;j++){for(var deck=_deckDB[j],k=0;k<deck.CARDLIST.length;k++){var cardflat=deck.CARDLIST[k];card=$scope.LookupCard(cardflat[1]),null===card||"undefined"==card?(card={},card.name=cardflat[1],card.count=cardflat[0],card.countword="("+card.count+" decks)",card.include=!1,card.exclude=!1,$scope.Cards.push(card)):(card.count++,card.countword="("+card.count+" decks)")}clss=$scope.LookupClass(deck.CLASS),null!==clss&&"undefined"!=clss&&(clss.count++,clss.countword="("+clss.count+" decks)"),archetype=$scope.LookupArchetype(deck.ARCHETYPE),null===archetype||"undefined"==archetype?(archetype={},archetype.name=toTitleCase(deck.ARCHETYPE),archetype.count=1,archetype.icon="<img src='"+$scope.BaseURL+"/assets/Icon_"+toTitleCase(deck.CLASS)+"_64.png'>",archetype.countword="("+archetype.count+" decks)",archetype.selected=!1,$scope.Archetypes.push(archetype)):(archetype.count++,archetype.countword="("+archetype.count+" decks)"),evt=$scope.LookupEvent(deck.EVENT),null===evt||"undefined"==evt?(evt={},evt.name=toTitleCase(deck.EVENT),evt.count=1,evt.selected=!1,evt.countword="("+evt.count+" decks)",$scope.Events.push(evt)):(evt.count++,evt.countword="("+evt.count+" decks)"),player=$scope.LookupPlayer(deck.PLAYER),null===player||"undefined"==player?(player={},player.name=toTitleCase(deck.PLAYER),player.count=1,player.selected=!1,player.countword="("+player.count+" decks)",$scope.Players.push(player)):(player.count++,player.countword="("+player.count+" decks)")}$scope.Cards.sort(function(a,b){return a.count<b.count?1:a.count>b.count?-1:0}),$scope.Archetypes.sort(function(a,b){return a.count<b.count?1:a.count>b.count?-1:0}),$scope.Classes.sort(function(a,b){return a.count<b.count?1:a.count>b.count?-1:0}),$scope.Events.sort(function(a,b){return a.count<b.count?1:a.count>b.count?-1:0}),$scope.Players.sort(function(a,b){return a.count<b.count?1:a.count>b.count?-1:0})},$scope.UpdateCharts=function(){$scope.ChartByClass.data.rows=[];for(var k=0;k<$scope.Classes.length;k++)$scope.Classes[k].count>0&&$scope.ChartByClass.data.rows.push({c:[{v:toTitleCase($scope.Classes[k].name)},{v:$scope.Classes[k].count}]});$scope.ChartByArchetype.data.rows=[];for(var l=0;l<$scope.Archetypes.length;l++)$scope.Archetypes[l].count>0&&$scope.ChartByArchetype.data.rows.push({c:[{v:toTitleCase($scope.Archetypes[l].name)},{v:$scope.Archetypes[l].count}]});$scope.ChartByEvent.data.rows=[];for(var m=0;m<$scope.Events.length;m++)$scope.Events[m].count>0&&$scope.ChartByEvent.data.rows.push({c:[{v:toTitleCase($scope.Events[m].name)},{v:$scope.Events[m].count}]});$scope.ChartByClass.options.title="Filtered Decks by Class ("+$scope.FILTERDECKDB.length+" decks)",$scope.ChartByArchetype.options.title="Filtered Decks by Type ("+$scope.ChartByArchetype.data.rows.length+" types)",$scope.ChartByEvent.options.title="Filtered Decks by Event ("+$scope.ChartByEvent.data.rows.length+" events)",$scope.ChartByClass.options.slices={};for(var n=0;n<$scope.ChartByClass.data.rows.length;n++){var slice={};slice.color=$scope.LookupClass($scope.ChartByClass.data.rows[n].c[0].v.toLowerCase()).color,$scope.ChartByClass.options.slices[n]=slice}},$scope.LookupClass=function(c){for(var i=0;i<$scope.Classes.length;i++){var cls=$scope.Classes[i];if(cls.name.toLowerCase()==c.toLowerCase())return cls}return null},$scope.LookupEvent=function(e){for(var i=0;i<$scope.Events.length;i++){var evt=$scope.Events[i];if(evt.name.toLowerCase()==e.toLowerCase())return evt}return null},$scope.LookupPlayer=function(e){for(var i=0;i<$scope.Players.length;i++){var plr=$scope.Players[i];if(plr.name.toLowerCase()==e.toLowerCase())return plr}return null},$scope.LookupArchetype=function(a){for(var i=0;i<$scope.Archetypes.length;i++){var archetype=$scope.Archetypes[i];if(archetype.name.toLowerCase()==a.toLowerCase())return archetype}return null},$scope.LookupCard=function(c){for(var i=0;i<$scope.Cards.length;i++){var card=$scope.Cards[i];if(card.name.toLowerCase()==c.toLowerCase())return card}return null},$scope.FilterArchetypesIncludes=function(a){for(var i=0;i<$scope.Filters.Archetypes.length;i++)if($scope.Filters.Archetypes[i].name.toLowerCase()==a.toLowerCase())return!0;return!1},$scope.FilterClassesIncludes=function(c){for(var i=0;i<$scope.Filters.Classes.length;i++)if($scope.Filters.Classes[i].name.toLowerCase()==c.toLowerCase())return!0;return!1},$scope.FilterEventsIncludes=function(e){for(var i=0;i<$scope.Filters.Events.length;i++)if($scope.Filters.Events[i].name.toLowerCase()==e.toLowerCase())return!0;return!1},$scope.FilterPlayersIncludes=function(e){for(var i=0;i<$scope.Filters.Players.length;i++)if($scope.Filters.Players[i].name.toLowerCase()==e.toLowerCase())return!0;return!1},$scope.FilterIncludeCardsIncludes=function(deck){for(var ret=!0,filterincludes=!1,i=0;i<$scope.Filters.IncludeDecksWithCards.length;i++){var filter=$scope.Filters.IncludeDecksWithCards[i];filterincludes=!1;for(var j=0;j<deck.CARDLIST.length;j++){var card=deck.CARDLIST[j];if(filter.name.toLowerCase()==card[1].toLowerCase()&&filter.include){filterincludes=!0;break}}filterincludes||(ret=!1)}return ret},$scope.FilterExcludeCardsIncludes=function(deck){for(var i=0;i<$scope.Filters.ExcludeDecksWithCards.length;i++)for(var filter=$scope.Filters.ExcludeDecksWithCards[i],j=0;j<deck.CARDLIST.length;j++){var card=deck.CARDLIST[j];if(filter.name.toLowerCase()==card[1].toLowerCase()&&filter.exclude)return!0}return!1},$scope.GetCardCount=function(cards){for(var count=0,i=0;i<cards.length;i++){var card=cards[i];count+=Math.round(card.TOTALCOUNT/card.SEENCOUNT)}return count},$scope.FilterDecks=function(){$scope.DeckHelperData={},$scope.DeckHelperCards=[],$scope.FILTERDECKDB=[],$scope.Application.DeckListShowing=[];for(var i=0;i<$scope.DECKDB.length;i++){var deck=$scope.DECKDB[i],dt=new Date(deck.DATE);if(dt>=$scope.Filters.StartDate&&dt<=$scope.Filters.EndDate&&(0===$scope.Filters.Classes.length||$scope.FilterClassesIncludes(deck.CLASS))&&(0===$scope.Filters.Archetypes.length||$scope.FilterArchetypesIncludes(deck.ARCHETYPE))&&(0===$scope.Filters.Events.length||$scope.FilterEventsIncludes(deck.EVENT))&&(0===$scope.Filters.Players.length||$scope.FilterPlayersIncludes(deck.PLAYER))&&(0===$scope.Filters.IncludeDecksWithCards.length||$scope.FilterIncludeCardsIncludes(deck))&&(0===$scope.Filters.ExcludeDecksWithCards.length||!$scope.FilterExcludeCardsIncludes(deck))){$scope.FILTERDECKDB.push(deck);for(var j=0;j<deck.CARDLIST.length;j++){var card=deck.CARDLIST[j],cardName=card[1],cardCount=card[0];$scope.DeckHelperCards.includes(cardName)?($scope.DeckHelperData[cardName].SEENCOUNT++,$scope.DeckHelperData[cardName].TOTALCOUNT=$scope.DeckHelperData[cardName].TOTALCOUNT+cardCount):($scope.DeckHelperCards.push(cardName),$scope.DeckHelperData[cardName]={},$scope.DeckHelperData[cardName].NAME=cardName,$scope.DeckHelperData[cardName].SEENCOUNT=1,$scope.DeckHelperData[cardName].TOTALCOUNT=cardCount)}}}$scope.DeckHelperCards.sort(function(a,b){return $scope.DeckHelperData[a].SEENCOUNT<$scope.DeckHelperData[b].SEENCOUNT?1:$scope.DeckHelperData[a].SEENCOUNT>$scope.DeckHelperData[b].SEENCOUNT?-1:0}),$scope.FILTERDECKDB.sort(function(a,b){return a.DATE<b.DATE?1:a.DATE>b.DATE?-1:0}),$scope.Tier1Cards=$scope.GetFilteredCardsBetween(90,101),$scope.Tier2Cards=$scope.GetFilteredCardsBetween(65,90),$scope.Tier3Cards=$scope.GetFilteredCardsBetween(35,65),$scope.Tier4Cards=$scope.GetFilteredCardsBetween(0,35),$scope.CopyClipboardCards=$scope.GetFilteredCardsBetween(65,101)},$scope.SelectDeck=function(index){$scope.Application.CurrentlySelectedDeck=$scope.FILTERDECKDB[index]},$scope.OpenStartDatePicker=function($event){$event.preventDefault(),$event.stopPropagation(),$scope.StartDatePicker.opened=!0},$scope.OpenEndDatePicker=function($event){$event.preventDefault(),$event.stopPropagation(),$scope.EndDatePicker.opened=!0},$scope.GetTextListFromDeckList=function(cards){for(var list="",i=0;i<cards.length;i++){var card=cards[i];list=list+card[0]+" "+card[1]+"\n"}return list},$scope.GetTextListFromCardGroup=function(cards){for(var list="",i=0;i<cards.length;i++){var card=cards[i];list=list+Math.round(card.TOTALCOUNT/card.SEENCOUNT)+" "+card.NAME+"\n"}return list},$scope.GetFilteredCardsBetween=function(lowPCT,highPCT){for(var list=[],deckcount=$scope.FILTERDECKDB.length,seenPCT=0,i=0;i<$scope.DeckHelperCards.length;i++){var card=$scope.DeckHelperData[$scope.DeckHelperCards[i]];seenPCT=card.SEENCOUNT/deckcount*100,seenPCT>=lowPCT&&highPCT>seenPCT&&list.push(card)}return list},$scope.ResetFilters=function(){for(var i=0;i<$scope.Classes.length;i++)$scope.Classes[i].selected=!1;for(var j=0;j<$scope.Archetypes.length;j++)$scope.Archetypes[j].selected=!1;for(var k=0;k<$scope.Events.length;k++)$scope.Events[k].selected=!1;for(var m=0;m<$scope.Players.length;m++)$scope.Players[m].selected=!1;for(var l=0;l<$scope.Cards.length;l++){var card=$scope.Cards[l];card.include=!1,card.exclude=!1}$scope.Filters.StartDate=new Date(2017,1,28),$scope.Filters.EndDate=new Date,$scope.Filters.Classes=[],$scope.Filters.Archetypes=[],$scope.Filters.Events=[],$scope.Filters.Players=[],$scope.Filters.Cards=[],$scope.Calculate()},$scope.Calculate=function(){$scope.FilterDecks(),$scope.PopulateAllData(!1),$scope.UpdateCharts(),$scope.Application.CurrentlySelectedDeckIndex=0,$scope.SelectDeck($scope.Application.CurrentlySelectedDeckIndex)},$scope.GetCardImage=function(card){return"http://media.services.zam.com/v1/media/byName/hs/cards/enus/"+card.id+".png"},$scope.GetCardDBInfo=function(name){for(var i=0;i<CARDDB.length;i++){var card=CARDDB[i];if(card.name.toLowerCase()===name.toLowerCase())return card}return null},$scope.PopulateAllData(!0),$scope.SetupCharts(),$scope.Calculate()}]);